    <!-- BEGIN GENERATED CONTENT
/*
 * This file was automatically generated by make-map from MakeMap.Test.dll.
 *
 * DO NOT MODIFY.
 */

      -->

    <Member MemberName="TryFromTestEnum">
      <MemberSignature Language="C#" Value="public static bool TryFromTestEnum (MakeMap.Test.TestEnum value, out int rval);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="MakeMap.Test.TestEnum" />
        <Parameter Name="rval" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">The managed value to convert.</param>
        <param name="rval">The OS-specific equivalent value.</param>
        <summary>Converts a <see cref="T:MakeMap.Test.TestEnum" /> 
          enumeration value to an OS-specific value.</summary>
        <returns><see langword="true" /> if the conversion was successful; 
        otherwise, <see langword="false" />.</returns>
        <remarks><para>This is an exception-safe alternative to 
        <see cref="M:Mono.Unix.Native.NativeConvert.FromTestEnum" />.</para>
        <para>If successful, this method stores the OS-specific equivalent
        value of <paramref name="value" /> into <paramref name="rval" />.
        Otherwise, <paramref name="rval" /> will contain <c>0</c>.</para>
        </remarks>
        <altmember cref="M:Mono.Unix.Native.NativeConvert.FromTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.ToTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.TryToTestEnum" />
      </Docs>
    </Member>
    <Member MemberName="FromTestEnum">
      <MemberSignature Language="C#" Value="public static int FromTestEnum (MakeMap.Test.TestEnum value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="MakeMap.Test.TestEnum" />
      </Parameters>
      <Docs>
        <param name="value">The managed value to convert.</param>
        <summary>Converts a <see cref="T:MakeMap.Test.TestEnum" /> 
          to an OS-specific value.</summary>
        <returns>The equivalent OS-specific value.</returns>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> has no equivalent OS-specific value.
        </exception>
        <remarks></remarks>
        <altmember cref="M:Mono.Unix.Native.NativeConvert.ToTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.TryFromTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.TryToTestEnum" />
      </Docs>
    </Member>
    <Member MemberName="TryToTestEnum">
      <MemberSignature Language="C#" Value="public static bool TryToTestEnum (int value, out MakeMap.Test.TestEnum rval);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="rval" Type="MakeMap.Test.TestEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">The OS-specific value to convert.</param>
        <param name="rval">The managed equivalent value</param>
        <summary>Converts an OS-specific value to a 
          <see cref="T:MakeMap.Test.TestEnum" />.</summary>
        <returns><see langword="true" /> if the conversion was successful; 
        otherwise, <see langword="false" />.</returns>
        <remarks><para>This is an exception-safe alternative to 
        <see cref="M:Mono.Unix.Native.NativeConvert.ToTestEnum" />.</para>
        <para>If successful, this method stores the managed equivalent
        value of <paramref name="value" /> into <paramref name="rval" />.
        Otherwise, <paramref name="rval" /> will contain a <c>0</c>
        cast to a <see cref="T:MakeMap.Test.TestEnum" />.</para>
                </remarks>
        <altmember cref="M:Mono.Unix.Native.NativeConvert.FromTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.ToTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.TryFromTestEnum" />
      </Docs>
    </Member>
    <Member MemberName="ToTestEnum">
      <MemberSignature Language="C#" Value="public static MakeMap.Test.TestEnum ToTestEnum (int value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>MakeMap.Test.TestEnum</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The OS-specific value to convert.</param>
        <summary>Converts an OS-specific value to a 
          <see cref="T:MakeMap.Test.TestEnum" />.</summary>
					<returns>The equivalent managed value.</returns>

        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> has no equivalent managed value.
        </exception>
        <remarks>
        
        </remarks>
        <altmember cref="M:Mono.Unix.Native.NativeConvert.FromTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.TryFromTestEnum" />
        <altmember cref="M:Mono.Unix.Native.NativeConvert.TryToTestEnum" />
      </Docs>
    </Member>

    <!-- END GENERATED CONTENT -->
